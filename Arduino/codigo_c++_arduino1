* Codigo para la matriz led, conexion serial y modulo de Bluetooth.
#include <FrequencyTimer2.h> 

 

#define T { \ 

     {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 1, 1, 1, 1, 0, 0, 0}, \ 

    {0, 0, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 0, 0, 0, 0, 0, 0} \ 

} 

 

#define E { \ 

     {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 1, 1, 1, 0, 0, 0, 0}, \ 

    {1, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 1, 1, 0, 0, 0, 0, 0}, \ 

    {1, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 1, 1, 1, 0, 0, 0, 0}, \ 

     {0, 0, 0, 0, 0, 0, 0, 0} \ 

} 

 

#define L { \ 

    {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 1, 1, 1, 0, 0, 0, 0}, \ 

    {0, 0, 0, 0, 0, 0, 0, 0} \ 

} 

 

#define U { \ 

    {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 0, 0, 1, 0, 0, 0, 0}, \ 

    {1, 0, 0, 1, 0, 0, 0, 0}, \ 

    {1, 0, 0, 1, 0, 0, 0, 0}, \ 

    {1, 0, 0, 1, 0, 0, 0, 0}, \ 

    {1, 0, 0, 1, 0, 0, 0, 0}, \ 

    {0, 1, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 0, 0, 0, 0, 0, 0} \ 

} 

 

#define B { \ 

    {0, 0, 0, 0, 0, 0, 0, 0}, \ 

     {1, 1, 1, 0, 0, 0, 0, 0}, \ 

    {1, 0, 0, 1, 0, 0, 0, 0}, \ 

    {1, 0, 0, 1, 0, 0, 0, 0}, \ 

    {1, 1, 1, 0, 0, 0, 0, 0}, \ 

    {1, 0, 0, 1, 0, 0, 0, 0}, \ 

    {1, 1, 1, 1, 0, 0, 0, 0},  \ 

    {0, 0, 0, 0, 0, 0, 0, 0} \ 

} 

 

#define I { \ 

    {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {1, 1, 1, 1, 1, 0, 0, 0}, \ 

    {0, 0, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 1, 0, 0, 0, 0, 0}, \ 

    {1, 1, 1, 1, 1, 0, 0, 0}, \ 

    {0, 0, 0, 0, 0, 0, 0, 0} \ 

} 

 

#define S { \ 

    {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {0, 1, 1, 1, 0, 0, 0, 0}, \ 

    {1, 0, 0, 0, 0, 0, 0, 0}, \ 

    {0, 1, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 0, 1, 0, 0, 0, 0}, \ 

    {0, 0, 0, 1, 0, 0, 0, 0}, \ 

    {1, 1, 1, 0, 0, 0, 0, 0}, \ 

    {0, 0, 0, 0, 0, 0, 0, 0} \ 

} 

 

#define CORAZON { \ 

{0, 0, 0, 0, 0, 0, 0, 0}, \ 

{0, 1, 0, 0, 0, 1, 0, 0}, \ 

{1, 1, 1, 0, 1, 1, 1, 0}, \ 

{1, 1, 1, 1, 1, 1, 1, 0}, \ 

  {0, 1, 1, 1, 1, 1, 0, 0}, \ 

  {0, 0, 1, 1, 1, 0, 0, 0}, \ 

  {0, 0, 0, 1, 0, 0, 0, 0}, \ 

  {0, 0, 0, 0, 0, 0, 0, 0} \ 

} 

 

//fjhbdbf 

#define D { \ 

    {0, 0, 0, 1, 0, 0, 0, 0}, \ 

    {0, 0, 0, 1, 0, 0, 0, 0}, \ 

    {0, 0, 0, 1, 0, 0, 0, 0}, \ 

    {0, 0, 0, 1, 0, 0, 0, 0}, \ 

    {0, 0, 0, 1, 0, 0, 0, 0}, \ 

    {0, 0, 0, 1, 0, 0, 0, 0}, \ 

    {0, 0, 0, 1, 0, 0, 0, 0}, \ 

    {0, 0, 0, 1, 0, 0, 0, 0} \ 

} 

 

#define F { \ 

    {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {0, 0, 1, 0, 0, 1, 0, 0}, \ 

    {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {0, 0, 1, 1, 1, 1, 0, 0}, \ 

    {0, 0, 0, 0, 0, 0, 0, 0}, \ 

    {0, 0, 0, 0, 0, 0, 0, 0} \ 

} 

 

////////////////////7774  

 

#define FIGURE_1 { \ 

{0,0,0,0,0,0,0,0}, \ 

{0,1,0,0,0,0,1,0}, \ 

{1,0,1,0,0,1,0,1}, \ 

{0,1,1,1,1,1,1,0}, \ 

{0,0,1,1,1,1,0,0}, \ 

{0,1,0,1,1,0,1,0}, \ 

{1,0,0,0,0,0,0,1}, \ 

{0,0,0,0,0,0,0,0} \ 

}  

 

#define FIGURE_2 { \ 

{0,0,0,0,0,0,0,0}, \ 

{0,0,1,1,1,1,0,0}, \ 

{0,1,0,0,0,0,1,0}, \ 

{0,0,1,1,1,1,1,0}, \ 

{0,0,1,0,1,0,1,0}, \ 

{0,0,1,1,1,1,1,0}, \ 

{0,1,1,0,0,0,1,1}, \ 

{0,0,0,0,0,0,0,0} \ 

}  

 

#define FIGURE_3 { \ 

{0,0,0,0,0,0,0,0}, \ 

{0,1,0,0,0,0,0,1}, \ 

{0,0,1,1,1,1,1,0}, \ 

{0,0,1,0,1,0,1,0}, \ 

{0,0,1,1,1,1,1,0}, \ 

{0,1,1,1,1,1,1,1}, \ 

{0,0,1,0,0,0,1,0}, \ 

{0,0,0,0,0,0,0,0} \ 

}  

 

#define FIGURE_4 { \ 

{0,0,0,0,0,0,0,0}, \ 

{0,0,1,1,1,1,0,0}, \ 

{0,1,0,0,0,0,1,0}, \ 

{0,1,0,0,0,0,1,0}, \ 

{0,1,0,1,1,0,1,0}, \ 

{1,1,1,1,1,1,1,1}, \ 

{0,1,0,0,0,0,1,0}, \ 

{0,0,0,0,0,0,0,0} \ 

}  

 

char entrada; 

byte col = 0; 

byte leds[8][8]; 

int pins[17] = {-1, 5, 4, 3, 2, 14, 15, 16, 17, 13, 12, 11, 10, 9, 8, 7, 6}; 

int cols[8] = {pins[13], pins[3], pins[4], pins[10], pins[6], pins[11], pins[15], pins[16]}; 

int rows[8] = {pins[9], pins[14], pins[8], pins[12], pins[1], pins[7], pins[2], pins[5]}; 

const int numPatterns = 14;  

byte patterns[numPatterns][8][8] = {T,E,L,U,B,I,S,CORAZON, D, F, FIGURE_1,FIGURE_2,FIGURE_3,FIGURE_4};  

int pattern = 0; 

 

void setup() { 

    Serial.begin(9600); 

    for (int i = 1; i <= 16; i++) { 

        pinMode(pins[i], OUTPUT); 

    } 

    for (int i = 1; i <= 8; i++) { 

        digitalWrite(cols[i - 1], HIGH); 

    } 

    for (int i = 1; i <= 8; i++) { 

        digitalWrite(rows[i - 1], HIGH); 

    } 

    clearLeds(); 

    FrequencyTimer2::disable(); 

    FrequencyTimer2::setPeriod(2000); 

    FrequencyTimer2::setOnOverflow(display); 

    setPattern(pattern); 

} 

 

void loop() { 

    if (Serial.available() > 0) { 

        entrada = Serial.read(); 

    } 

    if (entrada == 'C') { 

        slidePattern(7,380); 

        slidePattern(0, 380); 

        slidePattern(1, 380); 

        slidePattern(2, 380); 

         slidePattern(1, 380); 

      slidePattern(0, 380); 

      slidePattern(3, 380); 

      slidePattern(4, 380); 

      slidePattern(4, 380); 

      slidePattern(5, 380); 

      slidePattern(6, 380); 

      slidePattern(7, 380); 

 

    } else if (entrada == 'D') { 

        slidePattern(8, 300); 

    } else if (entrada == 'F') { 

        slidePattern(9, 300); 

    } else if (entrada == 'G') { 

        slidePattern(10, 300); 

        slidePattern(11, 300); 

        slidePattern(12, 300); 

        slidePattern(13, 300); 

    } 

} 

 

void clearLeds() { 

    for (int i = 0; i < 8; i++) { 

        for (int j = 0; j < 8; j++) { 

            leds[i][j] = 0; 

        } 

    } 

} 

 

void setPattern(int pattern) { 

    for (int i = 0; i < 8; i++) { 

        for (int j = 0; j < 8; j++) { 

            leds[i][j] = patterns[pattern][i][j]; 

        } 

    } 

} 

 

void slidePattern(int pattern, int del) { 

    for (int l = 0; l < 8; l++) { 

        for (int i = 0; i < 7; i++) { 

            for (int j = 0; j < 8; j++) { 

                leds[j][i] = leds[j][i + 1]; 

            } 

        } 

        for (int j = 0; j < 8; j++) { 

            leds[j][7] = patterns[pattern][j][l]; 

        } 

        delay(del); 

    } 

} 

 

void display() { 

    digitalWrite(cols[col], HIGH); 

    col++; 

    if (col == 8) { 

        col = 0; 

    } 

    for (int row = 0; row < 8; row++) { 

        if (leds[col][7 - row] == 1) { 

            digitalWrite(rows[row], HIGH); 

        } else { 

            digitalWrite(rows[row], LOW); 

        } 

    } 

    digitalWrite(cols[col], LOW); 

} 

